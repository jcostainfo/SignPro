/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package signpro;

import java.awt.Cursor;
import java.awt.event.ActionEvent;
import java.io.File;
import java.util.ArrayList;
import java.util.Arrays;
import java.util.List;

import javax.swing.AbstractAction;
import javax.swing.Action;
import javax.swing.JFileChooser;
import javax.swing.JTable;
import javax.swing.table.DefaultTableModel;

import com.infosistema.iflow.service.WorkFile;

import signpro.auxiliar.ButtonColumn;

/**
 *
 * @author prego
 */
public class CarregarDocumentos extends javax.swing.JFrame {

    
    private File[] selectedFiles;
    private JTable jt;
    

    /**
     * Creates new form CarregarDocumentos
     * @param jt
    
     */
    public CarregarDocumentos(JTable jt) {
        this.jt = jt;
        initComponents();
        jFileChooser1.setMultiSelectionEnabled(true);
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        jFileChooser1 = new javax.swing.JFileChooser();
        jButton1 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jFileChooser1.setDragEnabled(true);
        jFileChooser1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jFileChooser1ActionPerformed(evt);
            }
        });

        jButton1.setText("Cancelar");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                    .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 88, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jFileChooser1, javax.swing.GroupLayout.PREFERRED_SIZE, javax.swing.GroupLayout.DEFAULT_SIZE, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(18, 18, 18)
                .addComponent(jButton1)
                .addContainerGap(javax.swing.GroupLayout.DEFAULT_SIZE, Short.MAX_VALUE))
        );

        pack();
    }// </editor-fold>//GEN-END:initComponents

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
        this.setVisible(false);
    }//GEN-LAST:event_jButton1ActionPerformed

    
    private final Action delete = new AbstractAction(){
        @Override
        public void actionPerformed(ActionEvent e){
            JTable table = (JTable)e.getSource();
            int modelRow = Integer.valueOf( e.getActionCommand() );
            ((DefaultTableModel)table.getModel()).removeRow(modelRow);
            List <File> aaux = new ArrayList <> (Arrays.asList(selectedFiles));
            aaux.remove(modelRow);
            selectedFiles = (File[]) aaux.toArray(new File[aaux.size()]);
        }
    };
    
    public void initializeFileList(File[] selectedFiles){
    	DefaultTableModel dtm = (DefaultTableModel) jt.getModel();
        dtm.setRowCount(0);
        
        for(File f : selectedFiles){
            String[] auxRow = {((WorkFile)f).getFilename(), this.getMIMEType(((WorkFile)f).getFilename().replaceAll(".*.\\.", ".")), "Remover"};
            ButtonColumn buttonColumn = new ButtonColumn(jt, delete, 2);
            //buttonColumn.setMnemonic(evt.VK_D);
            dtm.addRow(auxRow);
        }
        setSelectedFiles(selectedFiles);
    }
    
    public void addToFileList(File[] newSelectedFiles){
    	DefaultTableModel dtm = (DefaultTableModel) jt.getModel();
    	List <File> aaux = new ArrayList <> (Arrays.asList(this.selectedFiles));
    	
        for(File f : newSelectedFiles){
            String[] auxRow = {((WorkFile)f).getFilename(), this.getMIMEType(((WorkFile)f).getFilename().replaceAll(".*.\\.", ".")), "Remover"};
            ButtonColumn buttonColumn = new ButtonColumn(jt, delete, 2);
            //buttonColumn.setMnemonic(evt.VK_D);
            dtm.addRow(auxRow);
            aaux.add(f);
        }        
        this.selectedFiles = aaux.toArray(new File[aaux.size()]);
    }
    
    private void jFileChooser1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jFileChooser1ActionPerformed
        
        this.setCursor(Cursor.getPredefinedCursor(Cursor.WAIT_CURSOR));
        
        JFileChooser fc = (JFileChooser) evt.getSource();
        if(evt.getActionCommand().equals("ApproveSelection")){
            this.selectedFiles = fc.getSelectedFiles();
            
            DefaultTableModel dtm = (DefaultTableModel) jt.getModel();
            
            for(File f : selectedFiles){
                String[] auxRow = {f.getName(), this.getMIMEType(f.getName().replaceAll(".*.\\.", ".")), "Remover"};
                ButtonColumn buttonColumn = new ButtonColumn(jt, delete, 2);
                //buttonColumn.setMnemonic(evt.VK_D);
                dtm.addRow(auxRow);
            }
            
            this.setVisible(false);
        }
        
        this.setCursor(Cursor.getPredefinedCursor(Cursor.DEFAULT_CURSOR));
        
        
    }//GEN-LAST:event_jFileChooser1ActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(CarregarDocumentos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(CarregarDocumentos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(CarregarDocumentos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(CarregarDocumentos.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new CarregarDocumentos(null).setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JButton jButton1;
    private javax.swing.JFileChooser jFileChooser1;
    // End of variables declaration//GEN-END:variables

    
    
    
    public String getMIMEType(String ext){
        if(ext.equals(".3dm")) { return "x-world/x-3dmf"; }
        else if(ext.equals(".3dmf")) { return "x-world/x-3dmf"; } 
        else if(ext.equals(".a")) { return "application/octet-stream"; } 
        else if(ext.equals(".aab")) { return "application/x-authorware-bin"; } 
        else if(ext.equals(".aam")) { return "application/x-authorware-map"; } 
        else if(ext.equals(".aas")) { return "application/x-authorware-seg"; } 
        else if(ext.equals(".abc")) { return "text/vnd.abc"; } 
        else if(ext.equals(".acgi")) { return "text/html"; } 
        else if(ext.equals(".afl")) { return "video/animaflex"; } 
        else if(ext.equals(".ai")) { return "application/postscript"; } 
        else if(ext.equals(".aif")) { return "audio/aiff"; } 
        else if(ext.equals(".aif")) { return "audio/x-aiff"; } 
        else if(ext.equals(".aifc")) { return "audio/aiff"; }
        else if(ext.equals(".aifc")) { return "audio/x-aiff"; } 
        else if(ext.equals(".aiff")) { return "audio/aiff"; } 
        else if(ext.equals(".aiff")) { return "audio/x-aiff"; } 
        else if(ext.equals(".aim")) { return "application/x-aim"; } 
        else if(ext.equals(".aip")) { return "text/x-audiosoft-intra"; } 
        else if(ext.equals(".ani")) { return "application/x-navi-animation"; } 
        else if(ext.equals(".aos")) { return "application/x-nokia-9000-communicator-add-on-software"; } 
        else if(ext.equals(".aps")) { return "application/mime"; } 
        else if(ext.equals(".arc")) { return "application/octet-stream"; } 
        else if(ext.equals(".arj")) { return "application/arj"; } 
        else if(ext.equals(".art")) { return "image/x-jg"; } 
        else if(ext.equals(".asf")) { return "video/x-ms-asf"; } 
        
        else if(ext.equals(".asm")) { return "text/x-asm"; } 
        else if(ext.equals(".asp")) { return "text/asp"; } 
        else if(ext.equals(".asx")) { return "video/x-ms-asf-plugin"; } 
        else if(ext.equals(".avi")) { return "video/x-msvideo"; } 
        else if(ext.equals(".bin")) { return "application/octet-stream"; } 
        else if(ext.equals(".bm")) { return "image/bmp"; } 
        else if(ext.equals(".bmp")) { return "image/bmp"; } 
        else if(ext.equals(".boo")) { return "application/book"; } 
        else if(ext.equals(".book")) { return "application/book"; } 
        else if(ext.equals(".boz")) { return "application/x-bzip2"; } 
        else if(ext.equals(".bsh")) { return "application/x-bsh"; } 
        else if(ext.equals(".bz")) { return "application/x-bzip"; }
        else if(ext.equals(".bz2")) { return "application/x-bzip2"; } 
        else if(ext.equals(".c")) { return "text/plain"; } 
        else if(ext.equals(".c++")) { return "text/plain"; } 
        else if(ext.equals(".cc")) { return "text/plain"; } 
        else if(ext.equals(".ccad")) { return "application/clariscad"; } 
        else if(ext.equals(".cco")) { return "application/x-cocoa"; } 
        else if(ext.equals(".cdf")) { return "application/cdf"; } 
        else if(ext.equals(".cer")) { return "application/x-x509-ca-cert"; } 
        else if(ext.equals(".conf")) { return "text/plain"; } 
        else if(ext.equals(".cpio")) { return "application/x-cpio"; } 
        else if(ext.equals(".cpp")) { return "text/x-c"; } 
        else if(ext.equals(".css")) { return "text/css"; } 
 
        else if(ext.equals(".dcr")) { return "application/x-director"; } 
        else if(ext.equals(".doc")) { return "application/msword"; } 
        else if(ext.equals(".dot")) { return "application/msword"; } 
        else if(ext.equals(".drw")) { return "application/drafting"; } 
        else if(ext.equals(".dump")) { return "application/octet-stream"; } 
        else if(ext.equals(".dv")) { return "video/x-dv"; } 
        else if(ext.equals(".dvi")) { return "application/x-dvi"; } 
        else if(ext.equals(".dwf")) { return "model/vnd.dwf"; } 
        else if(ext.equals(".dwg")) { return "application/acad"; } 
        else if(ext.equals(".dxf")) { return "application/dxf"; } 
        else if(ext.equals(".dxr")) { return "application/x-director"; } 
        else if(ext.equals(".fli")) { return "video/fli"; }
        else if(ext.equals(".fif")) { return "image/fif"; } 
        else if(ext.equals(".flo")) { return "image/florian"; } 
        else if(ext.equals(".gif")) { return "image/gif"; } 
        else if(ext.equals(".gl")) { return "video/gl"; } 
        else if(ext.equals(".gz")) { return "application/x-compressed"; } 
        else if(ext.equals(".gzip")) { return "application/x-gzip"; } 
        else if(ext.equals(".h")) { return "text/plain"; } 
        else if(ext.equals(".help")) { return "application/x-helpfile"; } 
        else if(ext.equals(".htm")) { return "text/html"; } 
        else if(ext.equals(".html")) { return "text/html"; } 
        else if(ext.equals(".htmls")) { return "text/html"; } 

        else if(ext.equals(".htt")) { return "text/webviewhtml"; } 
        else if(ext.equals(".ico")) { return "image/x-icon"; } 
        else if(ext.equals(".imap")) { return "application/x-httpd-imap"; } 
        else if(ext.equals(".inf")) { return "application/inf"; } 
        else if(ext.equals(".ivy")) { return "application/x-livescreen"; } 
        else if(ext.equals(".jam")) { return "audio/x-jam"; } 
        else if(ext.equals(".jpe")) { return "image/jpeg"; } 
        else if(ext.equals(".jpeg")) { return "image/jpeg"; } 
        else if(ext.equals(".jpg")) { return "image/jpeg"; } 
        else if(ext.equals(".dxf")) { return "application/dxf"; } 
        else if(ext.equals(".dxr")) { return "application/x-director"; } 
        else if(ext.equals(".fli")) { return "video/fli"; }
        else if(ext.equals(".fif")) { return "image/fif"; } 
        else if(ext.equals(".flo")) { return "image/florian"; } 
        else if(ext.equals(".gif")) { return "image/gif"; } 
        else if(ext.equals(".gl")) { return "video/gl"; } 
        else if(ext.equals(".gz")) { return "application/x-compressed"; } 
        else if(ext.equals(".gzip")) { return "application/x-gzip"; } 
        else if(ext.equals(".h")) { return "text/plain"; } 
        else if(ext.equals(".help")) { return "application/x-helpfile"; } 
        else if(ext.equals(".htm")) { return "text/html"; } 
        else if(ext.equals(".html")) { return "text/html"; } 
        else if(ext.equals(".htmls")) { return "text/html"; }
        else if(ext.equals(".log")) { return "text/plain"; }
        else if(ext.equals(".mid")) { return "audio/x-midi"; }
        else if(ext.equals(".mime")) { return "www/mime"; }
        else if(ext.equals(".mod")) { return "audio/mod"; }
        else if(ext.equals(".moov")) { return "video/quicktime"; }
        else if(ext.equals(".mov")) { return "video/quicktime"; }
        else if(ext.equals(".movie")) { return "video/x-sgi-movie"; }
        else if(ext.equals(".mp2")) { return "audio/x-mpeg"; }
        else if(ext.equals(".mp3")) { return "audio/x-mpeg"; }
        else if(ext.equals(".mp4")) { return "video/x-mpeg"; }
        else if(ext.equals(".mp5")) { return "video/x-mpeg"; }
        else if(ext.equals(".mpeg")) { return "video/mpeg"; }
        else if(ext.equals(".mpg")) { return "video/mpeg"; }
        else if(ext.equals(".mv")) { return "video/x-sgi-movie"; }
        else if(ext.equals(".pbm")) { return "image/x-portable-bitmap"; }
        else if(ext.equals(".pcx")) { return "image/x-pcx"; }
        else if(ext.equals(".pdf")) { return "application/pdf"; }
        else if(ext.equals(".pic")) { return "image/pict"; }
        else if(ext.equals(".pot")) { return "application/mspowerpoint"; }
        else if(ext.equals(".ppa")) { return "application/vnd.ms-powerpoint"; }
        else if(ext.equals(".pps")) { return "application/mspowerpoint"; }
        else if(ext.equals(".ppt")) { return "application/mspowerpoint"; }
        else if(ext.equals(".ps")) { return "application/postscript"; }
        else if(ext.equals(".psd")) { return "application/octet-stream"; }
        else if(ext.equals(".qt")) { return "video/quicktime"; }
        else if(ext.equals(".ra")) { return "audio/x-pn-realaudio"; }
        else if(ext.equals(".rtf")) { return "text/richtext"; }
        else if(ext.equals(".sgm")) { return "text/sgml"; }
        else if(ext.equals(".shtml")) { return "text/html"; }
        else if(ext.equals(".swf")) { return "application/x-shockwave-flash"; }
        else if(ext.equals(".text")) { return "text/plain"; }
        else if(ext.equals(".tgz")) { return "application/x-compressed"; }
        else if(ext.equals(".tif")) { return "image/x-tiff"; }
        else if(ext.equals(".tiff")) { return "image/x-tiff"; }
        else if(ext.equals(".txt")) { return "text/plain"; }
        else if(ext.equals(".xbm")) { return "image/xbm"; }
        else if(ext.equals(".xl")) { return "application/excel"; }
        else if(ext.equals(".xla")) { return "application/excel"; }
        else if(ext.equals(".xlb")) { return "application/excel"; }
        else if(ext.equals(".xlc")) { return "application/excel"; }
        else if(ext.equals(".xld")) { return "application/excel"; }
        else if(ext.equals(".xlk")) { return "application/excel"; }
        else if(ext.equals(".xll")) { return "application/excel"; }
        else if(ext.equals(".xlm")) { return "application/excel"; }
        else if(ext.equals(".xls")) { return "application/excel"; }
        else if(ext.equals(".xlt")) { return "application/excel"; }
        else if(ext.equals(".xlv")) { return "application/excel"; }
        else if(ext.equals(".xlw")) { return "application/excel"; }
        else if(ext.equals(".xml")) { return "application/xml"; }
        else if(ext.equals(".png")) { return "image/png"; }
        else if(ext.equals(".zip")) { return "application/zip"; }
        else if(ext.equals(".svg")) { return "image/svg+xml"; }


        return ext;
    }
    
    
    
    
    /**
     * @return the selectedFiles
     */
    public File[] getSelectedFiles() {
        return selectedFiles;
    }

    /**
     * @param selectedFiles the selectedFiles to set
     */
    public void setSelectedFiles(File[] selectedFiles) {
        this.selectedFiles = selectedFiles;
    }

    
}
